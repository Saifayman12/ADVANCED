package task5;

import java.util.*;

public class SpellChecker {
//	
	
	
	
//	create a private set of strings call it dic 
		    private Set<String> dic;
		
		    public SpellChecker(Set<String> dic) {
		        this.dic = dic;}
		    
//		    a scan function is created that takes a string as input and outputs a list of strings
		
		    public List<String> scan(String input) {
		        List<String> output = new ArrayList<>();
		        String[] words = input.split("\\s+");
		        for (String i : words) {
		            if (!dic.contains(i)) {
		                output.addAll(Get_suggested(i));
		            } else {
		                output.add(i);}}
		        return output;}
// a new list empty is created, the input string is splitted into an array of words.
// a for loop is created to loop over every string in the list words, if string is not 
//	in the dic set the suggested words are added to the output array. but if its in the dic 
//the word itself is added to the output array.
		    
		    
		    
// Get_deletions() function returns a set of strings after deleting a charachter from it.
		    
		    private Set<String> Get_deletions(String wd) {
		        Set<String> delete = new HashSet<>();
		        for (int i = 0; i < wd.length(); i++) {
		            StringBuilder string_b = new StringBuilder(wd);
		            string_b.deleteCharAt(i);
		            delete.add(string_b.toString());}
		        return delete;}
		    
		    
		    

		    
		    private List<String> Get_suggested(String wd) {
		        List<String> Suggested_words = new ArrayList<>();
		        Suggested_words.addAll(Get_deletions(wd));
		        Suggested_words.addAll(Get_Inserted(wd));
		        Suggested_words.addAll(getReplacements(wd));
		        return Suggested_words;}
		    
		    
		    
		    
//getReplacements() returns a set of strings that are done by replacing every character of the abc to a every charchter of the string
		    // and trying every possible replacement.
		    
		    private Set<String> getReplacements(String wd) {
		        Set<String> corrected = new HashSet<>();
		        for (int i = 0; i < wd.length(); i++) {
		            for (char chr = 'a'; chr <= 'z'; chr++) {
		                StringBuilder string_b = new StringBuilder(wd);
		                string_b.setCharAt(i, chr);
		                corrected.add(string_b.toString());}}
		        			return corrected;}
		    
		
//Get_Inserted() function returns a set of strings that are generated by inserting one character from the abc into every
//possible position in the input word. 	
		  		    		    
		    
		    private Set<String> Get_Inserted(String wd) {
		        	Set<String> insert_in = new HashSet<>();
		        	for (int i = 0; i <= wd.length(); i++) {
		        		for (char chr = 'a'; chr <= 'z'; chr++) {
		                	StringBuilder string_b = new StringBuilder(wd);
		                	string_b.insert(i, chr);
		                	insert_in.add(string_b.toString());}}
		        			return insert_in;}
		
		    
		
		    public static void main(String[] args) {
		        Set<String> dic = new HashSet<>(Arrays.asList("computer", "science", "java", "advanced"));
		        SpellChecker spellChecker = new SpellChecker(dic);
		        String input = "comuter sience advenced jvea";
		        List<String> output = spellChecker.scan(input);
		        System.out.println(output);}
		}